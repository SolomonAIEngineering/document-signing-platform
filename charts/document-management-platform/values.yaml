# Default values for documenso Helm chart
# This is a YAML-formatted file.

global:
  nameOverride: ''
  fullnameOverride: ''
  imagePullSecrets: []
  commonLabels: {}
  commonAnnotations: {}

  # Pod Security Context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  # Network policy settings
  networkPolicy:
    enabled: false
    # Additional network policy rules
    additionalRules: []

# Main Documenso application
documenso:
  replicaCount: 1
  image:
    repository: documenso/documenso
    tag: latest
    pullPolicy: IfNotPresent

  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  # Security contexts
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true

  # Service configuration
  service:
    type: ClusterIP
    port: 3000
    annotations: {}

  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    # maxUnavailable: 1

  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Probes configuration
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http

  startupProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http

  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: documenso
                app.kubernetes.io/instance: documenso
            topologyKey: kubernetes.io/hostname

  podAnnotations: {}

  # Ingress configuration
  ingress:
    enabled: false
    className: ''
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Application environment variables
  env:
    PORT: '3000'
    NEXT_PUBLIC_WEBAPP_URL: 'https://example.com'
    NEXT_PUBLIC_MARKETING_URL: 'https://documenso.com'
    NEXT_PUBLIC_UPLOAD_TRANSPORT: 'database'
    NEXT_PUBLIC_DOCUMENT_SIZE_UPLOAD_LIMIT: ''
    NEXT_PUBLIC_POSTHOG_KEY: ''
    NEXT_PUBLIC_DISABLE_SIGNUP: ''

  # Sensitive environment variables - will be stored in a Secret
  secret:
    # Required secrets
    NEXTAUTH_SECRET: ''
    NEXTAUTH_URL: ''
    NEXT_PRIVATE_ENCRYPTION_KEY: ''
    NEXT_PRIVATE_ENCRYPTION_SECONDARY_KEY: ''

    # Optional secrets
    NEXT_PRIVATE_GOOGLE_CLIENT_ID: ''
    NEXT_PRIVATE_GOOGLE_CLIENT_SECRET: ''
    NEXT_PRIVATE_INTERNAL_WEBAPP_URL: ''
    NEXT_PRIVATE_DATABASE_URL: ''
    NEXT_PRIVATE_DIRECT_DATABASE_URL: ''

    # Storage-related secrets
    NEXT_PRIVATE_UPLOAD_ENDPOINT: ''
    NEXT_PRIVATE_UPLOAD_FORCE_PATH_STYLE: ''
    NEXT_PRIVATE_UPLOAD_REGION: ''
    NEXT_PRIVATE_UPLOAD_BUCKET: ''
    NEXT_PRIVATE_UPLOAD_ACCESS_KEY_ID: ''
    NEXT_PRIVATE_UPLOAD_SECRET_ACCESS_KEY: ''

    # Email-related secrets
    NEXT_PRIVATE_SMTP_TRANSPORT: ''
    NEXT_PRIVATE_SMTP_HOST: ''
    NEXT_PRIVATE_SMTP_PORT: ''
    NEXT_PRIVATE_SMTP_USERNAME: ''
    NEXT_PRIVATE_SMTP_PASSWORD: ''
    NEXT_PRIVATE_SMTP_APIKEY_USER: ''
    NEXT_PRIVATE_SMTP_APIKEY: ''
    NEXT_PRIVATE_SMTP_SECURE: ''
    NEXT_PRIVATE_SMTP_FROM_NAME: ''
    NEXT_PRIVATE_SMTP_FROM_ADDRESS: ''
    NEXT_PRIVATE_SMTP_SERVICE: ''
    NEXT_PRIVATE_RESEND_API_KEY: ''

    # Mail Channels secrets
    NEXT_PRIVATE_MAILCHANNELS_API_KEY: ''
    NEXT_PRIVATE_MAILCHANNELS_ENDPOINT: ''
    NEXT_PRIVATE_MAILCHANNELS_DKIM_DOMAIN: ''
    NEXT_PRIVATE_MAILCHANNELS_DKIM_SELECTOR: ''
    NEXT_PRIVATE_MAILCHANNELS_DKIM_PRIVATE_KEY: ''

    # Signing secrets
    NEXT_PRIVATE_SIGNING_PASSPHRASE: ''

  # Certificate mounting
  certificate:
    enabled: true
    mountPath: '/opt/documenso/cert.p12'
    existingSecret: ''
    key: 'cert.p12'

  # Volume for temporary storage
  extraVolumes: []
  extraVolumeMounts: []

  # Optional extra environment variables
  extraEnvVars: []
  # - name: EXTRA_VAR
  #   value: "extra-var-value"

  # Optional extra environment variables from secrets
  extraEnvVarsSecret: ''

# PostgreSQL configuration
postgresql:
  enabled: false
  image:
    repository: postgres
    tag: '15'
    pullPolicy: IfNotPresent

  # Deployment strategy for PostgreSQL
  strategy:
    type: Recreate

  # Security context for PostgreSQL
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 999
    readOnlyRootFilesystem: true

  service:
    port: 5432
    annotations: {}

  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Probes configuration
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  persistence:
    enabled: true
    size: 10Gi
    storageClass: ''
    annotations: {}
    accessModes:
      - ReadWriteOnce

  # Additional volumes needed when using readOnlyRootFilesystem
  extraVolumes:
    - name: tmp
      emptyDir: {}
    - name: var-run
      emptyDir: {}
    - name: var-lib-postgresql
      emptyDir: {}

  extraVolumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: var-run
      mountPath: /var/run/postgresql
    - name: var-lib-postgresql
      mountPath: /var/lib/postgresql
      readOnly: false

  # PostgreSQL credentials
  auth:
    # Create a random password if not set
    existingSecret: ''
    username: 'postgres'
    password: ''
    database: 'documenso'

  # PostgreSQL configuration
  configuration:
    shared_buffers: '256MB'
    max_connections: '100'

  # High Availability PostgreSQL
  replication:
    enabled: false
    readReplicas: 1
    synchronousCommit: 'on'
    numSynchronousReplicas: 1

  # Postgres metrics monitoring with prometheus
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      interval: 30s
      scrapeTimeout: 10s
      namespace: ''

  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: postgresql
                app.kubernetes.io/instance: postgresql
            topologyKey: kubernetes.io/hostname

  # Pod Disruption Budget for PostgreSQL
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    # maxUnavailable: 1

  # Backup configuration
  backup:
    enabled: false
    schedule: '0 0 * * *' # Daily at midnight
    image:
      repository: bitnami/postgresql
      tag: latest
    persistence:
      enabled: true
      storageClass: ''
      size: 5Gi
    s3:
      enabled: false
      bucket: ''
      region: ''
      accessKeyId: ''
      secretAccessKey: ''

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ''

# Prometheus ServiceMonitor
serviceMonitor:
  enabled: false
  namespace: ''
  interval: 30s
  scrapeTimeout: 10s
  labels: {}

# Network policy configuration globally
networkPolicy:
  enabled: false
  ingressRules:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx

# Istio configuration
istio:
  enabled: false
  gateway:
    enabled: false
    name: ''
